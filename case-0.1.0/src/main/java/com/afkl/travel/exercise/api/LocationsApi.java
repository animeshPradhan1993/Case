/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.afkl.travel.exercise.api;

import java.util.List;
import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import com.afkl.travel.exercise.model.Location;
import com.afkl.travel.exercise.model.LocationType;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2022-11-21T18:25:49.895999400+01:00[Europe/Berlin]")

@Validated
@Api(value = "locations", description = "the locations API")
public interface LocationsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /locations/{type}/{code}
     * Get location by type and code
     *
     * @param type The type of the location (required)
     * @param code The ISO code of the required airport (required)
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @return OK (status code 200)
     *         or NOTFOUND (status code 404)
     */
    @ApiOperation(value = "", nickname = "getLocationByTypeAndCode", notes = "Get location by type and code", response = Location.class, tags={ "locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Location.class),
        @ApiResponse(code = 404, message = "NOTFOUND") })
    @RequestMapping(value = "/locations/{type}/{code}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Location> getLocationByTypeAndCode(@ApiParam(value = "The type of the location",required=true, allowableValues = "\"country\", \"city\", \"airport\"") @PathVariable("type") LocationType type,@ApiParam(value = "The ISO code of the required airport",required=true) @PathVariable("code") String code,@ApiParam(value = "The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details." ) @RequestHeader(value="accept-language", required=false) String acceptLanguage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"parentCode\" : \"parentCode\", \"latitude\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"longitude\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /locations
     * Get all locations
     *
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @return OK (status code 200)
     */
    @ApiOperation(value = "", nickname = "getLocations", notes = "Get all locations", response = Location.class, responseContainer = "List", tags={ "locations", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = Location.class, responseContainer = "List") })
    @RequestMapping(value = "/locations",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Location>> getLocations(@ApiParam(value = "The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details." ) @RequestHeader(value="accept-language", required=false) String acceptLanguage) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"parentCode\" : \"parentCode\", \"latitude\" : 0.8008281904610115, \"name\" : \"name\", \"description\" : \"description\", \"longitude\" : 6.027456183070403 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
