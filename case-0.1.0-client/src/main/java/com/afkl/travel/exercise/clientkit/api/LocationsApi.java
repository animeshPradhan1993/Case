/*
 * Travel API
 * You can use this api to retrieve locations.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: someone@airfranceklm.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.afkl.travel.exercise.clientkit.api;

import com.afkl.travel.exercise.clientkit.ApiCallback;
import com.afkl.travel.exercise.clientkit.ApiClient;
import com.afkl.travel.exercise.clientkit.ApiException;
import com.afkl.travel.exercise.clientkit.ApiResponse;
import com.afkl.travel.exercise.clientkit.Configuration;
import com.afkl.travel.exercise.clientkit.Pair;
import com.afkl.travel.exercise.clientkit.ProgressRequestBody;
import com.afkl.travel.exercise.clientkit.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.afkl.travel.exercise.clientkit.model.Location;
import com.afkl.travel.exercise.clientkit.model.LocationType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LocationsApi {
    private ApiClient localVarApiClient;

    public LocationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LocationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for getLocationByTypeAndCode
     * @param type The type of the location (required)
     * @param code The ISO code of the required airport (required)
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOTFOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationByTypeAndCodeCall(LocationType type, String code, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locations/{type}/{code}"
            .replaceAll("\\{" + "type" + "\\}", localVarApiClient.escapeString(type.toString()))
            .replaceAll("\\{" + "code" + "\\}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("accept-language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationByTypeAndCodeValidateBeforeCall(LocationType type, String code, String acceptLanguage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getLocationByTypeAndCode(Async)");
        }
        
        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling getLocationByTypeAndCode(Async)");
        }
        

        okhttp3.Call localVarCall = getLocationByTypeAndCodeCall(type, code, acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get location by type and code
     * @param type The type of the location (required)
     * @param code The ISO code of the required airport (required)
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @return Location
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOTFOUND </td><td>  -  </td></tr>
     </table>
     */
    public Location getLocationByTypeAndCode(LocationType type, String code, String acceptLanguage) throws ApiException {
        ApiResponse<Location> localVarResp = getLocationByTypeAndCodeWithHttpInfo(type, code, acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Get location by type and code
     * @param type The type of the location (required)
     * @param code The ISO code of the required airport (required)
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @return ApiResponse&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOTFOUND </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Location> getLocationByTypeAndCodeWithHttpInfo(LocationType type, String code, String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getLocationByTypeAndCodeValidateBeforeCall(type, code, acceptLanguage, null);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get location by type and code
     * @param type The type of the location (required)
     * @param code The ISO code of the required airport (required)
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NOTFOUND </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationByTypeAndCodeAsync(LocationType type, String code, String acceptLanguage, final ApiCallback<Location> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationByTypeAndCodeValidateBeforeCall(type, code, acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<Location>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocations
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationsCall(String acceptLanguage, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (acceptLanguage != null) {
            localVarHeaderParams.put("accept-language", localVarApiClient.parameterToString(acceptLanguage));
        }

        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationsValidateBeforeCall(String acceptLanguage, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getLocationsCall(acceptLanguage, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get all locations
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @return List&lt;Location&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Location> getLocations(String acceptLanguage) throws ApiException {
        ApiResponse<List<Location>> localVarResp = getLocationsWithHttpInfo(acceptLanguage);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all locations
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @return ApiResponse&lt;List&lt;Location&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Location>> getLocationsWithHttpInfo(String acceptLanguage) throws ApiException {
        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(acceptLanguage, null);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all locations
     * @param acceptLanguage The accept language header should be used to internationalize the response. If not specified or the requested language is not supported, english should be returned. See https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Accept-Language for further details. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationsAsync(String acceptLanguage, final ApiCallback<List<Location>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(acceptLanguage, _callback);
        Type localVarReturnType = new TypeToken<List<Location>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
